<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)\SampleServiceImplementation\bin\Debug\SampleServiceImplementation.dll" #>
<#@ assembly name="$(TargetDir)\Ziv.ServiceModel.CodeGeneration.dll" #>
<#@ import namespace="Ziv.ServiceModel.CodeGeneration" #>
<#@ output extension=".cs" #>
<# System.Diagnostics.Debugger.Launch(); #>
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     (c) Ziv Systems 2015
//
//      !!!   DO NOT CHANGE - This code was generated by a tool. Changes would be reverted by regeneration   
//
//      This code contains service classes for Operations implementing IOperation<T>.
//      Operations calsses must have a single constructor. All constructor parameters before IOperationsManager
//      are considered parameters of the operation to be provided upon call. All parmeters after are
//      considerd services to be injected to service class.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////
<# 
    var operationTypes=OperationsCodeGenerationUtils.GetAllOperationTypes();
#>
<#    foreach  (Type operationType in operationTypes)
    {
        string shortName=operationType.OperationShortName();
        string resultTypeName=operationType.OperationResultType().Name;
        string parametersDecleration=operationType.OperationParameters().ToDecleration();
        string parametersInvocation=operationType.OperationParameters().ToInvocation();
        string servicesDecleration=operationType.OperationServices().ToDecleration();
 #>    

namespace <#=operationType.Namespace #> 
{
<#foreach   (var ns in operationType.OperationContractNamespaces())       
{
 #>
    using <#=ns.ToString() #>;
<#        } #>
    using System.ServiceModel;

    [ServiceContract]
    public interface I<#=shortName #>Service 
    {
        [OperationContract]
        OperationResult<<#=resultTypeName#>> <#=shortName #>(<#=parametersDecleration#>);

        [OperationContract]
        OperationStartInformation <#=shortName #>Async(<#=parametersDecleration#>);

        [OperationContract]        
        OperationResult<<#=resultTypeName#>> <#=shortName #>GetResult(Guid operationId);
    }
}



<#    } #>

