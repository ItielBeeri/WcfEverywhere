<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(TargetDir)\Ziv.ServiceModel.CodeGeneration.dll" #>
<#@ import namespace="Ziv.ServiceModel.CodeGeneration" #>
<#@ output extension=".cs" #>
<# System.Diagnostics.Debugger.Launch(); #>
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     (c) Ziv Systems 2015
//
//      !!!   DO NOT CHANGE - This code was generated by a tool. Changes would be reverted by regeneration   
//
//      This code contains service classes for Operations implementing IOperation<T>.
//      Operations calsses must have a single constructor. All constructor parameters before IOperationsManager
//      are considered parameters of the operation to be provided upon call. All parmeters after are
//      considerd services to be injected to service class.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////
<# 
    var operationTypes=OperationsCodeGenerationUtils.GetAllOperationTypes();
#>
<#    foreach  (Type operationType in operationTypes)
    {
        string shortName=operationType.OperationShortName();
        string resultTypeName=operationType.OperationResultType().Name;
        string parametersDecleration=operationType.OperationParameters().ToDecleration();
        string parametersInvocation=operationType.OperationParameters().ToInvocation();
        string servicesDecleration=operationType.OperationServices().ToDecleration();
 #>    

namespace <#=operationType.Namespace #> 
{
<#foreach   (var ns in operationType.OperationServiceNamespaces())       
{
 #>
    using <#=ns.ToString() #>;
<#        } #>

    public class <#=shortName #>Service : ServiceBase<<#=resultTypeName#>>, I<#=shortName #>Service
    {
<#foreach   (var srvc in operationType.OperationServices())   { #>
        private readonly <#=srvc.ParameterType.Name #> <#=srvc.ToPrivateValirableName() #>;
<#        } #>

        public <#=shortName #>Service(<#=servicesDecleration #>)
            : base(operationsManager)
        {
<#foreach   (var srvc in operationType.OperationServices())   { #>
            <#=srvc.ToPrivateValirableName() #> = <#=srvc.Name #>;
<#        } #>
        }

        public OperationResult<<#=resultTypeName#>> <#=shortName #>(<#=parametersDecleration#>)
        {
            return DoOperation(GetOperation(<#=parametersInvocation#>));
        }

        public OperationStartInformation <#=shortName #>Async(<#=parametersDecleration#>)
        {
            return DoOperationAsync(GetOperation(<#=parametersInvocation#>));
        }

        public OperationResult<<#=resultTypeName#>> <#=shortName #>GetResult(Guid operationId)
        {
            return GetOperationResult(operationId);
        }

        protected <#=operationType.Name#> GetOperation(<#=parametersDecleration#>)
        {
            return new <#=operationType.Name#>(<#=operationType.OperationConstructorInvocation()#>);
        }
    }
}



<#    } #>

